// Code generated by MockGen. DO NOT EDIT.
// Source: internal/identity/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	identityentities "mceasy/service-demo/internal/identity/identityentities"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindCompanyProfile mocks base method.
func (m *MockRepository) FindCompanyProfile(ctx context.Context, companyId uint64) (*identityentities.CompanyProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCompanyProfile", ctx, companyId)
	ret0, _ := ret[0].(*identityentities.CompanyProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCompanyProfile indicates an expected call of FindCompanyProfile.
func (mr *MockRepositoryMockRecorder) FindCompanyProfile(ctx, companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCompanyProfile", reflect.TypeOf((*MockRepository)(nil).FindCompanyProfile), ctx, companyId)
}

// FindDriverById mocks base method.
func (m *MockRepository) FindDriverById(ctx context.Context, id uint64) (*identityentities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDriverById", ctx, id)
	ret0, _ := ret[0].(*identityentities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDriverById indicates an expected call of FindDriverById.
func (mr *MockRepositoryMockRecorder) FindDriverById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDriverById", reflect.TypeOf((*MockRepository)(nil).FindDriverById), ctx, id)
}
