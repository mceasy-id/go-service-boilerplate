// Code generated by MockGen. DO NOT EDIT.
// Source: internal/product/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	product "mceasy/service-demo/internal/product"
	dtos "mceasy/service-demo/internal/product/dtos"
	entities "mceasy/service-demo/internal/product/entities"
	resourceful "mceasy/service-demo/pkg/resourceful"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Atomic mocks base method.
func (m *MockRepository) Atomic(ctx context.Context, opt *sql.TxOptions, cb func(product.Repository) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Atomic", ctx, opt, cb)
	ret0, _ := ret[0].(error)
	return ret0
}

// Atomic indicates an expected call of Atomic.
func (mr *MockRepositoryMockRecorder) Atomic(ctx, opt, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Atomic", reflect.TypeOf((*MockRepository)(nil).Atomic), ctx, opt, cb)
}

// DeleteProductByUUID mocks base method.
func (m *MockRepository) DeleteProductByUUID(ctx context.Context, productUUID string, companyId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductByUUID", ctx, productUUID, companyId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductByUUID indicates an expected call of DeleteProductByUUID.
func (mr *MockRepositoryMockRecorder) DeleteProductByUUID(ctx, productUUID, companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductByUUID", reflect.TypeOf((*MockRepository)(nil).DeleteProductByUUID), ctx, productUUID, companyId)
}

// FindProductResourceful mocks base method.
func (m *MockRepository) FindProductResourceful(ctx context.Context, resource *resourceful.Resource[uuid.UUID, dtos.ProductList]) (*resourceful.Resource[uuid.UUID, dtos.ProductList], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductResourceful", ctx, resource)
	ret0, _ := ret[0].(*resourceful.Resource[uuid.UUID, dtos.ProductList])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductResourceful indicates an expected call of FindProductResourceful.
func (mr *MockRepositoryMockRecorder) FindProductResourceful(ctx, resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductResourceful", reflect.TypeOf((*MockRepository)(nil).FindProductResourceful), ctx, resource)
}

// GetProductByUUID mocks base method.
func (m *MockRepository) GetProductByUUID(ctx context.Context, productUUID string, companyId int64, options ...entities.GetProductOption) (entities.Product, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, productUUID, companyId}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProductByUUID", varargs...)
	ret0, _ := ret[0].(entities.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByUUID indicates an expected call of GetProductByUUID.
func (mr *MockRepositoryMockRecorder) GetProductByUUID(ctx, productUUID, companyId interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, productUUID, companyId}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByUUID", reflect.TypeOf((*MockRepository)(nil).GetProductByUUID), varargs...)
}

// IsProductKeyExists mocks base method.
func (m *MockRepository) IsProductKeyExists(ctx context.Context, payload entities.StoreProduct, companyId int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProductKeyExists", ctx, payload, companyId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsProductKeyExists indicates an expected call of IsProductKeyExists.
func (mr *MockRepositoryMockRecorder) IsProductKeyExists(ctx, payload, companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProductKeyExists", reflect.TypeOf((*MockRepository)(nil).IsProductKeyExists), ctx, payload, companyId)
}

// StoreNewProduct mocks base method.
func (m *MockRepository) StoreNewProduct(ctx context.Context, product entities.Product) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreNewProduct", ctx, product)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreNewProduct indicates an expected call of StoreNewProduct.
func (mr *MockRepositoryMockRecorder) StoreNewProduct(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreNewProduct", reflect.TypeOf((*MockRepository)(nil).StoreNewProduct), ctx, product)
}

// UpdateProductByUUID mocks base method.
func (m *MockRepository) UpdateProductByUUID(ctx context.Context, product entities.UpdateProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductByUUID", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductByUUID indicates an expected call of UpdateProductByUUID.
func (mr *MockRepositoryMockRecorder) UpdateProductByUUID(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductByUUID", reflect.TypeOf((*MockRepository)(nil).UpdateProductByUUID), ctx, product)
}
