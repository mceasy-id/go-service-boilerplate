// Code generated by MockGen. DO NOT EDIT.
// Source: internal/product/usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	identityentities "mceasy/service-demo/internal/identity/identityentities"
	dtos "mceasy/service-demo/internal/product/dtos"
	entities "mceasy/service-demo/internal/product/entities"
	resourceful "mceasy/service-demo/pkg/resourceful"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockUseCase) Delete(ctx context.Context, productUUID string, companyId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, productUUID, companyId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUseCaseMockRecorder) Delete(ctx, productUUID, companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUseCase)(nil).Delete), ctx, productUUID, companyId)
}

// Index mocks base method.
func (m *MockUseCase) Index(ctx context.Context, companyId uint64, resource *resourceful.Resource[uuid.UUID, dtos.ProductList]) (*resourceful.Resource[uuid.UUID, dtos.ProductList], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", ctx, companyId, resource)
	ret0, _ := ret[0].(*resourceful.Resource[uuid.UUID, dtos.ProductList])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Index indicates an expected call of Index.
func (mr *MockUseCaseMockRecorder) Index(ctx, companyId, resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockUseCase)(nil).Index), ctx, companyId, resource)
}

// Show mocks base method.
func (m *MockUseCase) Show(ctx context.Context, productUUID string, companyId int64) (entities.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show", ctx, productUUID, companyId)
	ret0, _ := ret[0].(entities.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Show indicates an expected call of Show.
func (mr *MockUseCaseMockRecorder) Show(ctx, productUUID, companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockUseCase)(nil).Show), ctx, productUUID, companyId)
}

// Store mocks base method.
func (m *MockUseCase) Store(ctx context.Context, requestCredential identityentities.Credential, payload entities.StoreProduct) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, requestCredential, payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockUseCaseMockRecorder) Store(ctx, requestCredential, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockUseCase)(nil).Store), ctx, requestCredential, payload)
}

// Update mocks base method.
func (m *MockUseCase) Update(ctx context.Context, requestCredential identityentities.Credential, productUUID string, payload entities.UpdateProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, requestCredential, productUUID, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUseCaseMockRecorder) Update(ctx, requestCredential, productUUID, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUseCase)(nil).Update), ctx, requestCredential, productUUID, payload)
}
